{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","apagaTodos","catch","console","log","erro","Error","negociacao","conexao","adiciona","listaAtual","obterNegociacoes","negociacoes","filter","some","equals","negociacaoExistente","listaTodos","get","map","Negociacao","Date","objeto","data","quantidade","valor","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação\")\n            });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.equals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível importar as negociações\");\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação\");\n            });\n    }\n\n    obterNegociacoesDaSemana() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n\n    }\n\n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n}"]}